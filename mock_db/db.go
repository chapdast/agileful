// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	db "github.com/chapdast/agileful/db"
	gomock "github.com/golang/mock/gomock"
	pgxpool "github.com/jackc/pgx/v4/pgxpool"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDatabase) Create(ctx context.Context, article *db.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDatabaseMockRecorder) Create(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatabase)(nil).Create), ctx, article)
}

// Delete mocks base method.
func (m *MockDatabase) Delete(ctx context.Context, articleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseMockRecorder) Delete(ctx, articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), ctx, articleID)
}

// Raw mocks base method.
func (m *MockDatabase) Raw() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockDatabaseMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockDatabase)(nil).Raw))
}

// Read mocks base method.
func (m *MockDatabase) Read(ctx context.Context, option ...db.Option) ([]*db.Article, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range option {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].([]*db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDatabaseMockRecorder) Read(ctx interface{}, option ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, option...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDatabase)(nil).Read), varargs...)
}

// Update mocks base method.
func (m *MockDatabase) Update(ctx context.Context, article *db.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseMockRecorder) Update(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabase)(nil).Update), ctx, article)
}

// UpdateViewCount mocks base method.
func (m *MockDatabase) UpdateViewCount(ctx context.Context, articleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateViewCount", ctx, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateViewCount indicates an expected call of UpdateViewCount.
func (mr *MockDatabaseMockRecorder) UpdateViewCount(ctx, articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateViewCount", reflect.TypeOf((*MockDatabase)(nil).UpdateViewCount), ctx, articleID)
}
